

/**
* Data Structure, List
*	@author :Camila chac√≥n
*	@date 19-03-2019
*	@version 1
**/
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;

public class List {
	
	public static Node head = null; //Empty list

	
	public boolean isEmpty() { //check if queue is empty
		
		return head == null ? true : false;
	}
	
	public void InsertAtBegin(Node newNode){ //push the list 
		
		newNode.next = head;
		head = newNode;
		
	}
	
	public void InsertAtEnd(Node newNode) { //insert new node at the end
		if (isEmpty()) { //Verify 
			head = newNode;
		}else {
			Node temp = head;
			while(temp.next != null) {	
				temp = temp.next;
			}
		
			temp.next = newNode;	
	
		}
	}
	
	public void InsertAtInedex(Node newNode , int index){ //insert in a specific node
		
		Node temp;
		Node pre = head;
		
		for (int i = 0; i < index - 1; i++) { //cycle to the index
			pre = pre.next;
		}
		
		temp = pre.next;
		newNode.next = temp;
		pre.next = newNode;
		
	}
	
	public void DeleteAtBegin(){ //using a temporal variable to catch the node that will be delete
		
		Node temp = head;
		head = head.next;
		temp = null;
		System.gc();
		
	}
	
	public void DeleteAtEnd(){ //delete the node that points to null
		
		Node temp;
		Node Pre = head;
		
		while(Pre.next.next != null) {
			Pre = Pre.next;
		}
		
		temp = Pre.next;
		Pre.next = null;
		temp = null;
		System.gc();
		
	}
	
	public void DeleteAtIndex(int index) {//delete a node that the index points
		
		Node temp = head;
		
		for (int i = 0; i < index - 1; i++) {
			temp = temp.next;
		}
		
		Node toDelete = temp.next;
		temp.next = toDelete.next;
		toDelete = null;
		System.gc();
		
	}
	
	public void reverse(){ //the list now will be upside down 
		
		Stack tempList = new Stack();  //constructor
		Node temp = head;
		
		while(temp != null) {
			
			tempList.Push(temp.clone());
			temp = temp.next;
			
		}
		
		head = tempList.head;
		
	}
	
	public void PrintList() throws IOException { //print the final list
		
		BufferedWriter bw = new BufferedWriter (new OutputStreamWriter(System.out));
		
		Node temp = head;
		while(temp != null) {
			
			bw.write(temp.toString());
			temp = temp.next;
		}
		
		bw.flush();
		bw.close();
	}
	
	public void quickSort() { // method to sort
	
		if (!isEmpty()) {
			
			//divide the list at two parts
			List leftSet = new List (); 
			List rightSet =  new List ();

			Node temp = head.next;
			Node pivot = temp;	
		
	
			while (temp != null){
			
				if ( temp.value < pivot.value) //change depending on the parameter
				
				
					leftSet.InsertAtEnd(temp.clone());
		
				else
				
					rightSet.InsertAtEnd(temp.clone());
				
				temp = temp.next;
		}
			// use recursion until there are single element lists
		leftSet.quickSort(); 
		rightSet.quickSort();
		//join lists
		pivot.next=rightSet.head;
		leftSet.InsertAtEnd(pivot);
		head = leftSet.head;
		
	}
	}
	
	public static int LenghtList() { // catch the length of the list
		
		int counter =0;
		Node temp=head;
		while (temp != null) {
			counter++;
			temp=temp.next;
		}
		return counter;
	}
	
	
	public static Node getNode(int index) { //catch the number of an specific index
		
		if(LenghtList()< index)
			return null;
		
		else {
			Node temp=head;
			for (int i = 0; i < index; i++) {
				temp=temp.next;
				
			}
			return temp;
			
		}
	
	}
	
	public Node binarySearch(int index) {
		
		int  inicio = 0;
		int  finall = LenghtList()-1;
		int Num=0;
		Node result;
		boolean Positive = false ;
		
		while(!(Positive) && inicio <=finall ){
			int mitad = ((inicio + finall)/2);
			
			
			if ( List.getNode(index).age == mitad){
				Positive = true;
				Num=mitad;
			}else
				if(index < getNode(mitad).age)
					finall=mitad-1;
				 else
					if(index > getNode(mitad).age)
					inicio= mitad+1;	
		
		}
		if(Positive)
			 result.getNode();
		else
			result=-1;
		
		return result;
		 
	
	}		
	
}
		
		
return null;		
	}

	
	public static void main(String[] args) throws IOException {
		
		List student = new List(); //constructor
		
		student.InsertAtBegin(new Node ("Paula", 22, 561556));
		student.InsertAtEnd(new Node("camila ", 22,2434));
		student.InsertAtBegin(new Node("Juan", 23,2345676));
		student.InsertAtInedex(new Node("pepe", 23,2345676), 1);

		student.quickSort();
		student.PrintList();

		
	}

}
