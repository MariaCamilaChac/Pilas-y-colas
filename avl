package arbol;


public class AVLTree{
	public AVLTree(){}
	
	
	Node root =null;
	
	
	public boolean isEmpty() {
		return root == null? true : false;
	}
	
	
	public void Insert(int value) {
		if (isEmpty()) {
			Node temp = new Node(value);
			root =temp;
		}
		else {
			
			Node temp = root;
			Node parent = root;
			
			while(temp != null) {
				parent = temp;
				if (temp.value<value)
					temp= temp.Tree_rigth;
				
				else
					temp=temp.Tree_left;
			}
			
			Node newNode = new Node (value);
			if (parent.value < value) 
				parent.Tree_rigth=newNode;
			else 
				parent.Tree_left=newNode;
		
		}
	}
	
	public boolean isLeaf(Node node) {
		return(node.Tree_left==null && node.Tree_rigth == null)? true:false;
	}
	
	public boolean oneChild(Node node) {
		return (node.Tree_left==null && node.Tree_rigth==null)? false:true;
	}
	
	public void Delete(int value){
		
		Node temp= root;
		
		while (temp != null) {
			
			if(temp.value==value) {
		
				break;
			}
			if (value < temp.value) 
				temp = temp.Tree_left;
			
			else
				temp = temp.Tree_rigth;
		}
		if(temp==null){
			System.out.println("this value doesn't exist");
		}
		Node parent=root; 
		if(isLeaf(temp)) {
			temp=null;
			if(value < parent.value) 
				parent.Tree_left = null;
			
			else 
				parent.Tree_rigth= null;
		}
			else {
				if(oneChild(temp)) {
					
					if(temp.Tree_left != null) {
						
						if(value < parent.value)
							parent.Tree_left = temp.Tree_left;
						else
							parent.Tree_rigth=temp.Tree_left;
					}
					else{
						if(value < parent.value)
							parent.Tree_left = temp.Tree_rigth;
						else
							parent.Tree_rigth=temp.Tree_rigth;
					}
					temp=null;
				}
				
				else {
					
					Node temp2 = temp.Tree_rigth;
					
					if(temp2.Tree_left==null){
						
						temp2.Tree_left=temp.Tree_left;
						
						if(value < parent.value)
							parent.Tree_left = temp2;
						else
							parent.Tree_rigth=temp2;
					} 
						
					
				}
				
			}
	
			
	}
	
	
	public Node Search (int value) {
		
		Node temp= root;
		
		while (temp != null) {
			
			if(temp.value==value) {
		
				break;
			}
			if (value < temp.value) 
				temp = temp.Tree_left;
			
			else
				temp = temp.Tree_rigth;
		}
		return temp;
	}
	
	
	public void Preorder(Node node) {
		if(node != null) {
			System.out.println(node.value+ " ");
			Preorder(node.Tree_left);
			Preorder(node.Tree_rigth);

		}
	}
	
	
	public void Postorder(Node node) {
		if(node != null) {
			
			Postorder(node.Tree_left);
			Postorder(node.Tree_rigth);
			System.out.println(node.value+" ");
		}
	}
	
	
	public void Inorder(Node node) {
		if(node != null) {
			
			Inorder(node.Tree_left);
			System.out.println(node.value+" ");
			Inorder(node.Tree_rigth);
			
		}
	}
	
	public Node parent(Node node) {
		
		if(node == root)
			return root;
		else {
			Node temp = root;
			Node parent = null;
			while(temp != null) {
				
				if(node.value== temp.value)
					break;
				
				else
				{
					parent = temp;
					if(node.value < temp.value)
						temp = temp.Tree_left;
					else
						temp = temp.Tree_rigth;
				}
			}
			if (temp == null)
				parent = null;
			
			return parent;
		}
		
	
		
	}
	
	public int nodeHeight(Node node){
		
		if (isLeaf(node)) 
			return 0;
		
		else{
		
			return nodeHeight(node.Tree_left)> nodeHeight(node.Tree_rigth)?
					nodeHeight(node.Tree_left)+1: nodeHeight(node.Tree_rigth)+1;
		}
			
			
		
	}
	
	public int unblalance_factor(Node node) {
		
		return nodeHeight(node.Tree_left)- nodeHeight(node.Tree_left);
	}
	
	public void left_rotation(Node node) {
		
		Node izq= node.Tree_rigth;
		Node temp= izq.Tree_left;
		
		izq.Tree_left=node;
		node.Tree_rigth=temp;
		
		nodeHeight(node);
	}
	
}
